def Magnitud(Cx,Cy):
    return np.sqrt(Cx**2+Cy**2)

def Unitario(C1,C2):
    return C1/Magnitud(C1, C2)

def Seno_Mag(Cx,Cy):
    return Cy/Magnitud(Cx, Cy)**3

def Coseno_Mag(Cx,Cy):
    return Cx/Magnitud(Cx, Cy)**3

def Potencial(Q,Cx,Cy,Gx,Gy):
    return k*Q/Magnitud(Gx-Cx,Gy-Cy)

def E_integral(t,y,CharObject):
    ETx=0
    ETy=0
    i=0
    for i in range(0, NumObjects):
        ETx+=k*CharObject[i][2]*Coseno_Mag(y[0]-CharObject[i][0], y[1]-CharObject[i][1])
        ETy+=k*CharObject[i][2]*Seno_Mag(y[0]-CharObject[i][0], y[1]-CharObject[i][1])
        i+=1
    return [Unitario(ETx, ETy),Unitario(ETy, ETx)]

def Pendiente(x1,x2,y1,y2):
    return (y2-y1)/(x2-x1)

def LineField(): 
    R0=0.1
    for i in range(0,NumObjects):
        dt=0.3          
        if CharObject[i][2]<0:
            dt=-dt
        Theta=[]
        for theta in np.linspace(0, 2*np.pi*15/16, 16):
            b=0
            for k in range(NumObjects):
                if k!=i and CharObject[i][2]*CharObject[k][2]>0:
                    if CharObject[i][0]==CharObject[k][0]:
                        b=1
                    else:
                        P=Pendiente(CharObject[i][0], CharObject[k][0], CharObject[i][1], CharObject[k][1])
                        if P==round(np.tan(theta),5):
                            b=1
                            print(f"No {round(np.tan(theta))}")
            if b==0:
                Theta.append(theta)

        for theta in Theta:
                print(round(np.tan(theta)))
                r=sciInt.ode(E_integral)
                r.set_f_params(CharObject)
                x=[ CharObject[i][0] + np.cos(theta)*R0 ]
                w=[ CharObject[i][1] + np.sin(theta)*R0 ]
                r.set_initial_value([x[0],w[0]])
                while (Limits[0]<r.y[0] and r.y[0]<Limits[1]) and (Limits[2]<r.y[1] and r.y[1]<Limits[3]):
                    r.integrate(r.t+dt)
                    x.append(r.y[0])
                    w.append(r.y[1])
                    a=0
                    for j in range(0,NumObjects):
                        if Magnitud(r.y[0]-CharObject[j][0], r.y[1]-CharObject[j][1])<R0:
                            a=1
                            break
                    if a==1:
                        break
                plt.plot(x, w, "k")    
