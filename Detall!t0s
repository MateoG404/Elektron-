def Validate(entries, Data): # Función para validar datos

    for i in range(len(entries)):
        if entries[i][0].get()!='0':
            for j in range(3):
                A = entries[i][j].get()
                if A != '':
                    if ValidateType(A) == 1:
                        Data[i][j] = float(A)
                    else:
                        messagebox.showwarning(
                            "Error", f"¡Ups! {A} no es una entrada válida. Inténtalo de nuevo ...")
        else:
            messagebox.showwarning("Error", f"¡Ups! '0' no es una entrada válida. Inténtalo de nuevo ...")

    print(Data)
    
    
    def VecField(x,y):
    ETx,ETy=np.meshgrid(x,y)
    print("-------------")
    for i in range(0,NumObjects):
        Ex=k*CharObject[i][2]*Coseno_Mag(X-CharObject[i][0], Y-CharObject[i][1])
        Ey=k*CharObject[i][2]*Seno_Mag(X-CharObject[i][0], Y-CharObject[i][1])
        ETx+=Ex
        ETy+=Ey
    ETx_u=Unitario(ETx, ETy)
    ETy_u=Unitario(ETy, ETx)
    #Field.quiver(X, Y, ETx_u, ETy_u, scale=30)

    R = np.log(np.hypot(ETx, ETy))
    Field.quiver(X, Y, ETx_u, ETy_u, R,  pivot="middle", alpha=0.8, scale=30)
    
    def construirGraficas():
    global NumObjects
    global Vec, X , Y

    print(len(CharObject))
    Vec=Space(Limits[0],Limits[1],Limits[2],Limits[3])
    X, Y = np.meshgrid(Vec[0], Vec[1])
    NumObjects=len(CharObject)

    if Show[0]==True or Show[1]==True:#Creating grid if necessary
        Vec = Space(Limits[0],Limits[1],Limits[2],Limits[3])
    
        X, Y = np.meshgrid(Vec[0], Vec[1])

    if Show[0]==True: 
        VecField(Vec[0],Vec[1])

    if Show[1]==True:
        V_e=Voltaje()
        plt.contour(X, Y, V_e[0], 30, colors='k', linestyles="dashed")
        plt.contour(X, Y, V_e[1], 30, colors='k')#Porque tenia 20
        plt.imshow(V_e[0], origin='lower', interpolation='bilinear', extent=(Limits[0], Limits[1], Limits[2], Limits[3]), cmap=cm.seismic, alpha=0.9)
        plt.imshow(V_e[1], origin='lower', interpolation='bilinear', extent=(Limits[0], Limits[1], Limits[2], Limits[3]), cmap='seismic', alpha=0.9)



    if Show[2]==True:
        LineField()

    if Show[3]==True:
        PointCharge()

    DoPlot(Limits[0],Limits[1],Limits[2],Limits[3])
    ventanaGraficas(fig, NumObjects)


